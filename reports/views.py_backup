from django.shortcuts import render
from django.http import HttpResponse
from collections import OrderedDict

from json2html import *
import json

from django.http import HttpResponseRedirect
from .forms import NameForm
from .forms import ChartForm
from django.shortcuts import redirect
from django.core.files.storage import FileSystemStorage

# Include the `fusioncharts.py` file that contains functions to embed the charts.
from fusioncharts import FusionCharts

def myFirstChart(request):

    #Chart data is passed to the `dataSource` parameter, like a dictionary in the form of key-value pairs.
    dataSource = OrderedDict()

    # The `chartConfig` dict contains key-value pairs of data for chart attribute
    chartConfig = OrderedDict()
    chartConfig["caption"] = "Countries With Most Oil Reserves [2017-18]"
    chartConfig["subCaption"] = "In MMbbl = One Million barrels"
    chartConfig["xAxisName"] = "Country"
    chartConfig["yAxisName"] = "Reserves (MMbbl)"
    chartConfig["numberSuffix"] = "K"
    chartConfig["theme"] = "fusion"

    # The `chartData` dict contains key-value pairs of data
    chartData = OrderedDict()
    chartData["Venezuela"] = 290
    chartData["Saudi"] = 260
    chartData["Canada"] = 180
    chartData["Iran"] = 140
    chartData["Russia"] = 115
    chartData["UAE"] = 100
    chartData["US"] = 30
    chartData["China"] = 30

    dataSource["chart"] = chartConfig
    dataSource["data"] = []

    # Convert the data in the `chartData`array into a format that can be consumed by FusionCharts.
    #The data for the chart should be in an array wherein each element of the array 
    #is a JSON object# having the `label` and `value` as keys.

    #Iterate through the data in `chartData` and insert into the `dataSource['data']` list.
    for key, value in chartData.items():
        data = {}
        data["label"] = key
        data["value"] = value
        dataSource["data"].append(data)


    # Create an object for the column 2D chart using the FusionCharts class constructor
    # The chart data is passed to the `dataSource` parameter.
    column2D = FusionCharts("column2d", "myFirstChart", "600", "400", "myFirstchart-container", "json", dataSource)

    return render(request, 'reports/myFirstChart.html', {
        'output': column2D.render()
    })


def mySecondChart(request):

    file = open("/home/admin1/jsonfiles/table2.json", "r")
    data = json.load(file)
    response = json2html.convert(json = data)
    return HttpResponse(response)


def myThirdChart(request):

    #Chart data is passed to the `dataSource` parameter, like a dictionary in the form of key-value pairs.
    dataSource = OrderedDict()

    # The `chartConfig` dict contains key-value pairs of data for chart attribute
    chartConfig = OrderedDict()
    chartConfig["caption"] = "Recommended Portfolio Split"
    chartConfig["subCaption"] = "For a net-worth of $1M"
    chartConfig["showValues"] = "1"
    chartConfig["showPercentInTooltip"] = "0"
    chartConfig["numberPrefix"] = "$"
    chartConfig["enableMultiSlicing"] = "1",
    chartConfig["theme"] = "fusion"

    # The `chartData` dict contains key-value pairs of data
    chartData = OrderedDict()
    chartData["Equity"] = 300000
    chartData["Debt"] = 230000
    chartData["Bullion"] = 180000
    chartData["Real-estate"] = 270000
    chartData["Insurance"] = 20000

    dataSource["chart"] = chartConfig
    dataSource["data"] = []

    # Convert the data in the `chartData`array into a format that can be consumed by FusionCharts.
    #The data for the chart should be in an array wherein each element of the array
    #is a JSON object# having the `label` and `value` as keys.

    #Iterate through the data in `chartData` and insert into the `dataSource['data']` list.
    for key, value in chartData.items():
        data = {}
        data["label"] = key
        data["value"] = value
        dataSource["data"].append(data)
    
    pie3d = FusionCharts("pie3d", "myThirdChart" , "100%", "400", "myThirdChart-container", "json", dataSource)
    return render(request, 'reports/myThirdChart.html', {
    'output': pie3d.render()
    })


def myFourthChart(request):

    #Chart data is passed to the `dataSource` parameter, like a dictionary in the form of key-value pairs.
    dataSource = OrderedDict()

    # The `chartConfig` dict contains key-value pairs of data for chart attribute
    chartConfig = OrderedDict()
    chartConfig["caption"] = "Average Fastball Velocity"
    chartConfig["subCaption"] = "[2005-2016]"
    chartConfig["yaxisname"] = "Velocity (in mph)"
    chartConfig["rotatelabels"] = "1"
    chartConfig["numbersuffix"] = "mph"
    chartConfig["setadaptiveymin"] = "1",
    chartConfig["theme"] = "fusion"

    # The `chartData` dict contains key-value pairs of data
    chartData = OrderedDict()
    chartData["2005"] = 89.45
    chartData["2006"] = 89.87
    chartData["2007"] = 89.64
    chartData["2008"] = 90.13
    chartData["2009"] = 90.54

    dataSource["chart"] = chartConfig
    dataSource["data"] = []

    # Convert the data in the `chartData`array into a format that can be consumed by FusionCharts.
    #The data for the chart should be in an array wherein each element of the array
    #is a JSON object# having the `label` and `value` as keys.

    #Iterate through the data in `chartData` and insert into the `dataSource['data']` list.
    for key, value in chartData.items():
        data = {}
        data["label"] = key
        data["value"] = value
        dataSource["data"].append(data)


    # Create an object for the column 2D chart using the FusionCharts class constructor
    # The chart data is passed to the `dataSource` parameter.
    line2d = FusionCharts("line", "myFourthChart", "600", "400", "myFourthChart-container", "json", dataSource)

    return render(request, 'reports/myFourthChart.html', {
        'output': line2d.render()
    })

def get_name(request):
    # if this is a POST request we need to process the form data
    if request.method == 'POST':
        # create a form instance and populate it with data from the request:
        form = NameForm(request.POST)
        name = request.POST.get('your_name')
        # check whether it's valid:
        if form.is_valid():
            # process the data in form.cleaned_data as required
            # ...
            # redirect to a new URL:
            #return HttpResponseRedirect('/thanks/')
            return HttpResponse("Hi %s " % name)

    # if a GET (or any other method) we'll create a blank form
    else:
        form = NameForm()

    return render(request, 'reports/name.html', {'form': form})

def simple_upload(request):
    if request.method == 'POST' and request.FILES['myfile']:
        myfile = request.FILES['myfile']
        fs = FileSystemStorage()
        filename = fs.save(myfile.name, myfile)
        uploaded_file_url = fs.url(filename)
        return render(request, 'reports/simple_upload.html', {
            'uploaded_file_url': uploaded_file_url
        })
    return render(request, 'reports/simple_upload.html')

def select_chart(request):
    if request.method == 'POST':
        form = ChartForm(request.POST)
        chartName = request.POST.get('chartName')
        if form.is_valid():
            if chartName == "tablechart":
                return redirect('tablechart')
            elif chartName == "piechart":
                return redirect('piechart')
            elif chartName == "barchart":
                return redirect('barchart')
            else:
                return redirect('linechart')
            return HttpResponse("Valid Chart is uploaded : %s " % chartName)
    else:
        form = ChartForm()

    return render(request, 'reports/chart.html', {'form': form})


